{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","props","handlePaste","e","_data","clipboardData","getData","data","replaceAll","regex_if","console","log","html","window","DOMParser","parseFromString","prevLevel","results","Array","from","body","children","node","nodeName","getAttribute","style","matches","regex_level","exec","level","push","textContent","outerHTML","result","join","turndown","TurndownService","use","tables","markdown","setState","handleTextChange","target","value","state","_prevProps","_prevState","onPaste","this","backgroundColor","onChange","display","flexDirection","width","height","justifyContent","overflowX","onClick","navigator","clipboard","writeText","React","PureComponent","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0OAWaA,EAAb,kDACE,WAAYC,GAAkB,IAAD,8BAC3B,cAAMA,IAmDRC,YAAiE,SAACC,GAChE,IAAMC,EAAQD,EAAEE,cAAcC,QAAQ,aAChCC,EAA2BH,EA0GtBI,WAAWC,EAAU,IAxGhCC,QAAQC,IAAIJ,GAYZ,IAVA,IAEMK,GAFS,IAAIC,OAAOC,WAENC,gBAAgBR,EAAM,aAItCS,EAAY,EAEVC,EAAU,GAEhB,MAAiBC,MAAMC,KAAKP,EAAKQ,KAAKC,UAAtC,eAAiD,CAA5C,IAAIC,EAAI,KAGX,GACO,MAHUA,EAAKC,SAQlB,GAJAb,QAAQC,IAAI,SAAUW,GAIJ,qBAFAA,EAAKE,aAAa,SAEE,CAAC,IAAD,EAE9BC,EAAK,UAAGH,EAAKE,aAAa,gBAArB,QAAiC,GAEtCE,EAAUC,EAAYC,KAAKH,GACjC,GAAgB,OAAZC,EAAkB,CACpB,IAAIG,GAASH,EAAQ,GAQrB,IANIG,EAAQb,GAGVC,EAAQa,KAAK,QAGRD,EAAQb,GACbC,EAAQa,KAAK,SAETd,EAAY,GACdC,EAAQa,KAAK,SAGfd,IAEFA,EAAYa,EAEZZ,EAAQa,KAAR,cAAoBR,EAAKS,cAEzBrB,QAAQC,IAAI,QAASkB,EAAOH,QAEzB,CAGL,KAAOV,EAAY,GACjBA,IAEAC,EAAQa,KAAK,SAETd,EAAY,GACdC,EAAQa,KAAK,SAOjBb,EAAQa,KAAR,aAAmBR,EAAKS,YAAxB,cAMFd,EAAQa,KAAKR,EAAKU,WAMxB,IAAMC,EAAShB,EAAQiB,KAAK,MAC5BxB,QAAQC,IAAIM,GACZP,QAAQC,IAAIsB,GAEZ,IAAME,EAAW,IAAIC,IACrBD,EAASE,IAAIC,KACb,IAAMC,EAAWJ,EAASA,SAASF,GAEnCvB,QAAQC,IAAI4B,GAEZ,EAAKC,SAAS,CAAEjC,KAAM0B,EAAQM,cAhJH,EAmJ7BE,iBAAwE,SACtEtC,GAEA,IAAMI,EAAOJ,EAAEuC,OAAOC,MAEtB,EAAKH,SAAS,CAAEjC,UArJhB,EAAKqC,MAAQ,CAAErC,KAAM,GAAIgC,SAAU,IAHR,EAD/B,qDAOE,cAPF,gCASE,SAAmBM,EAAsBC,MAT3C,oBAWE,WAAU,IAAD,OACP,OACE,sBAAKC,QAASC,KAAK9C,YAAauB,MAAO,CAAEwB,gBAAiB,QAA1D,UACE,iDACA,uCACA,oJAIA,0BAAUN,MAAOK,KAAKJ,MAAMrC,KAAM2C,SAAUF,KAAKP,mBACjD,sBACEhB,MAAO,CACL0B,QAAS,OACTC,cAAe,MACfC,MAAO,OACPC,OAAQ,OACRC,eAAgB,iBANpB,UASE,sBAAK9B,MAAO,CAAE4B,MAAO,MAAOG,UAAW,UAAvC,UACE,+CACA,8BAAMR,KAAKJ,MAAMrC,UAGnB,sBAAKkB,MAAO,CAAE4B,MAAO,MAAOG,UAAW,UAAvC,UACE,0CACW,IACT,wBACEC,QAAS,WACPC,UAAUC,UAAUC,UAAU,EAAKhB,MAAML,WAF7C,qBAQDS,KAAKJ,MAAML,sBA9CxB,GAAyBsB,IAAMC,eA6JzBrD,EAAW,2BACXkB,EAAc,Y,UC3JLoC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.ff7b1d8a.chunk.js","sourcesContent":["import React, { ChangeEventHandler, ClipboardEventHandler } from \"react\";\r\n\r\nimport TurndownService from \"turndown\";\r\nimport { tables } from \"joplin-turndown-plugin-gfm\";\r\n\r\ninterface AppProps {}\r\ninterface AppState {\r\n  data: string;\r\n  markdown: string;\r\n}\r\n\r\nexport class App extends React.PureComponent<AppProps, AppState> {\r\n  constructor(props: AppProps) {\r\n    super(props);\r\n\r\n    this.state = { data: \"\", markdown: \"\" };\r\n  }\r\n\r\n  componentDidMount() {}\r\n\r\n  componentDidUpdate(_prevProps: AppProps, _prevState: AppState) {}\r\n\r\n  render() {\r\n    return (\r\n      <div onPaste={this.handlePaste} style={{ backgroundColor: \"#ccc\" }}>\r\n        <h1>msg to markdown</h1>\r\n        <h2>usage</h2>\r\n        <p>\r\n          You can paste HTML content with CTRL+V. If you have HTML text on the\r\n          clipboard, you can also paste to the textarea.\r\n        </p>\r\n        <textarea value={this.state.data} onChange={this.handleTextChange} />\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            flexDirection: \"row\",\r\n            width: \"100%\",\r\n            height: \"75vh\",\r\n            justifyContent: \"space-between\",\r\n          }}\r\n        >\r\n          <div style={{ width: \"48%\", overflowX: \"scroll\" }}>\r\n            <h2>HTML (parsed)</h2>\r\n            <pre>{this.state.data}</pre>\r\n          </div>\r\n\r\n          <pre style={{ width: \"48%\", overflowX: \"scroll\" }}>\r\n            <h2>\r\n              markdown{\" \"}\r\n              <button\r\n                onClick={() => {\r\n                  navigator.clipboard.writeText(this.state.markdown);\r\n                }}\r\n              >\r\n                copy\r\n              </button>\r\n            </h2>\r\n            {this.state.markdown}\r\n          </pre>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  handlePaste: ClipboardEventHandler<HTMLDivElement> | undefined = (e) => {\r\n    const _data = e.clipboardData.getData(\"text/html\");\r\n    const data = cleanUpNastyMsgHtml(_data);\r\n\r\n    console.log(data);\r\n\r\n    const parser = new window.DOMParser();\r\n\r\n    const html = parser.parseFromString(data, \"text/html\");\r\n\r\n    // process the children\r\n\r\n    let prevLevel = 0;\r\n\r\n    const results = [];\r\n\r\n    for (let node of Array.from(html.body.children)) {\r\n      const nodeName = node.nodeName;\r\n\r\n      switch (nodeName) {\r\n        case \"P\":\r\n          console.log(\"test p\", node);\r\n\r\n          const className = node.getAttribute(\"class\");\r\n\r\n          if (className === \"MsoListParagraph\") {\r\n            // handle list stuff\r\n            const style = node.getAttribute(\"style\") ?? \"\";\r\n\r\n            const matches = regex_level.exec(style);\r\n            if (matches !== null) {\r\n              let level = +matches[1];\r\n\r\n              if (level > prevLevel) {\r\n                // push a <ul> onto the results\r\n\r\n                results.push(\"<ul>\");\r\n              }\r\n\r\n              while (level < prevLevel) {\r\n                results.push(\"</ul>\");\r\n\r\n                if (prevLevel > 0) {\r\n                  results.push(\"</li>\");\r\n                }\r\n\r\n                prevLevel--;\r\n              }\r\n              prevLevel = level;\r\n\r\n              results.push(`<li>${node.textContent}`);\r\n\r\n              console.log(\"level\", level, matches);\r\n            }\r\n          } else {\r\n            // close out any open ul\r\n\r\n            while (prevLevel > 0) {\r\n              prevLevel--;\r\n\r\n              results.push(\"</ul>\");\r\n\r\n              if (prevLevel > 0) {\r\n                results.push(\"</li>\");\r\n              }\r\n            }\r\n\r\n            // write a <p> tag with bare text\r\n\r\n            // TODO: add formatting\r\n            results.push(`<p>${node.textContent}</p>`);\r\n          }\r\n\r\n          break;\r\n\r\n        default:\r\n          results.push(node.outerHTML);\r\n\r\n          break;\r\n      }\r\n    }\r\n\r\n    const result = results.join(\"\\n\");\r\n    console.log(results);\r\n    console.log(result);\r\n\r\n    const turndown = new TurndownService();\r\n    turndown.use(tables);\r\n    const markdown = turndown.turndown(result);\r\n\r\n    console.log(markdown);\r\n\r\n    this.setState({ data: result, markdown });\r\n  };\r\n\r\n  handleTextChange: ChangeEventHandler<HTMLTextAreaElement> | undefined = (\r\n    e\r\n  ) => {\r\n    const data = e.target.value;\r\n\r\n    this.setState({ data });\r\n  };\r\n}\r\n\r\nconst regex_if = /<!\\[if.*?endif]>/gms;\r\nconst regex_level = /level(\\d)/;\r\n\r\nfunction cleanUpNastyMsgHtml(input: string) {\r\n  return input.replaceAll(regex_if, \"\");\r\n}\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { App } from \"./App\";\r\nimport \"./index.css\";\r\n\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}