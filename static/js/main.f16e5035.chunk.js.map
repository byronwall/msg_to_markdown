{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","props","handlePaste","e","_data","clipboardData","getData","data","replaceAll","regex_if","console","log","html","window","DOMParser","parseFromString","prevLevel","results","Array","from","body","children","node","nodeName","getAttribute","style","matches","regex_level","exec","level","push","textContent","outerHTML","result","join","turndown","TurndownService","use","tables","markdown","setState","handleTextChange","target","value","state","_prevProps","_prevState","onPaste","this","backgroundColor","onChange","display","flexDirection","minWidth","flex","React","PureComponent","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0OAWaA,EAAb,kDACE,WAAYC,GAAkB,IAAD,8BAC3B,cAAMA,IAsBRC,YAAiE,SAACC,GAChE,IAAMC,EAAQD,EAAEE,cAAcC,QAAQ,QAChCC,EAA2BH,EAuGtBI,WAAWC,EAAU,IArGhCC,QAAQC,IAAIJ,GAYZ,IAVA,IAEMK,GAFS,IAAIC,OAAOC,WAENC,gBAAgBR,EAAM,aAItCS,EAAY,EAEVC,EAAU,GAEhB,MAAiBC,MAAMC,KAAKP,EAAKQ,KAAKC,UAAtC,eAAiD,CAA5C,IAAIC,EAAI,KAGX,GACO,MAHUA,EAAKC,SAQlB,GAJAb,QAAQC,IAAI,SAAUW,GAIJ,qBAFAA,EAAKE,aAAa,SAEE,CAAC,IAAD,EAE9BC,EAAK,UAAGH,EAAKE,aAAa,gBAArB,QAAiC,GAEtCE,EAAUC,EAAYC,KAAKH,GACjC,GAAgB,OAAZC,EAAkB,CACpB,IAAIG,GAASH,EAAQ,GAQrB,IANIG,EAAQb,GAGVC,EAAQa,KAAK,QAGRD,EAAQb,GACbC,EAAQa,KAAK,SAETd,EAAY,GACdC,EAAQa,KAAK,SAGfd,IAEFA,EAAYa,EAEZZ,EAAQa,KAAR,cAAoBR,EAAKS,cAEzBrB,QAAQC,IAAI,QAASkB,EAAOH,QAEzB,CAGL,KAAOV,EAAY,GACjBA,IAEAC,EAAQa,KAAK,SAETd,EAAY,GACdC,EAAQa,KAAK,SAIjBb,EAAQa,KAAKR,EAAKS,kBAMpBd,EAAQa,KAAKR,EAAKU,WAMxB,IAAMC,EAAShB,EAAQiB,KAAK,MAC5BxB,QAAQC,IAAIM,GACZP,QAAQC,IAAIsB,GAEZ,IAAME,EAAW,IAAIC,IACrBD,EAASE,IAAIC,KACb,IAAMC,EAAWJ,EAASA,SAASF,GAEnCvB,QAAQC,IAAI4B,GAEZ,EAAKC,SAAS,CAAEjC,KAAM0B,EAAQM,cAhHH,EAmH7BE,iBAAwE,SACtEtC,GAEA,IAAMI,EAAOJ,EAAEuC,OAAOC,MAEtB,EAAKH,SAAS,CAAEjC,UArHhB,EAAKqC,MAAQ,CAAErC,KAAM,GAAIgC,SAAU,IAHR,EAD/B,qDAOE,cAPF,gCASE,SAAmBM,EAAsBC,MAT3C,oBAWE,WACE,OACE,sBAAKC,QAASC,KAAK9C,YAAauB,MAAO,CAAEwB,gBAAiB,QAA1D,UACE,iDACA,0BAAUN,MAAOK,KAAKJ,MAAMrC,KAAM2C,SAAUF,KAAKP,mBACjD,sBAAKhB,MAAO,CAAE0B,QAAS,OAAQC,cAAe,OAA9C,UACE,qBAAK3B,MAAO,CAAE4B,SAAU,EAAGC,KAAM,GAAjC,SAAuCN,KAAKJ,MAAMrC,OAClD,qBAAKkB,MAAO,CAAE4B,SAAU,EAAGC,KAAM,GAAjC,SAAuCN,KAAKJ,MAAML,qBAlB5D,GAAyBgB,IAAMC,eA6HzB/C,EAAW,2BACXkB,EAAc,Y,UC3HL8B,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.f16e5035.chunk.js","sourcesContent":["import React, { ChangeEventHandler, ClipboardEventHandler } from \"react\";\n\nimport TurndownService from \"turndown\";\nimport { tables } from \"joplin-turndown-plugin-gfm\";\n\ninterface AppProps {}\ninterface AppState {\n  data: string;\n  markdown: string;\n}\n\nexport class App extends React.PureComponent<AppProps, AppState> {\n  constructor(props: AppProps) {\n    super(props);\n\n    this.state = { data: \"\", markdown: \"\" };\n  }\n\n  componentDidMount() {}\n\n  componentDidUpdate(_prevProps: AppProps, _prevState: AppState) {}\n\n  render() {\n    return (\n      <div onPaste={this.handlePaste} style={{ backgroundColor: \"#ccc\" }}>\n        <h1>msg to markdown</h1>\n        <textarea value={this.state.data} onChange={this.handleTextChange} />\n        <div style={{ display: \"flex\", flexDirection: \"row\" }}>\n          <pre style={{ minWidth: 0, flex: 1 }}>{this.state.data}</pre>\n          <pre style={{ minWidth: 0, flex: 1 }}>{this.state.markdown}</pre>\n        </div>\n      </div>\n    );\n  }\n\n  handlePaste: ClipboardEventHandler<HTMLDivElement> | undefined = (e) => {\n    const _data = e.clipboardData.getData(\"text\");\n    const data = cleanUpNastyMsgHtml(_data);\n\n    console.log(data);\n\n    const parser = new window.DOMParser();\n\n    const html = parser.parseFromString(data, \"text/html\");\n\n    // process the children\n\n    let prevLevel = 0;\n\n    const results = [];\n\n    for (let node of Array.from(html.body.children)) {\n      const nodeName = node.nodeName;\n\n      switch (nodeName) {\n        case \"P\":\n          console.log(\"test p\", node);\n\n          const className = node.getAttribute(\"class\");\n\n          if (className === \"MsoListParagraph\") {\n            // handle list stuff\n            const style = node.getAttribute(\"style\") ?? \"\";\n\n            const matches = regex_level.exec(style);\n            if (matches !== null) {\n              let level = +matches[1];\n\n              if (level > prevLevel) {\n                // push a <ul> onto the results\n\n                results.push(\"<ul>\");\n              }\n\n              while (level < prevLevel) {\n                results.push(\"</ul>\");\n\n                if (prevLevel > 0) {\n                  results.push(\"</li>\");\n                }\n\n                prevLevel--;\n              }\n              prevLevel = level;\n\n              results.push(`<li>${node.textContent}`);\n\n              console.log(\"level\", level, matches);\n            }\n          } else {\n            // close out any open ul\n\n            while (prevLevel > 0) {\n              prevLevel--;\n\n              results.push(\"</ul>\");\n\n              if (prevLevel > 0) {\n                results.push(\"</li>\");\n              }\n            }\n\n            results.push(node.textContent);\n          }\n\n          break;\n\n        default:\n          results.push(node.outerHTML);\n\n          break;\n      }\n    }\n\n    const result = results.join(\"\\n\");\n    console.log(results);\n    console.log(result);\n\n    const turndown = new TurndownService();\n    turndown.use(tables);\n    const markdown = turndown.turndown(result);\n\n    console.log(markdown);\n\n    this.setState({ data: result, markdown });\n  };\n\n  handleTextChange: ChangeEventHandler<HTMLTextAreaElement> | undefined = (\n    e\n  ) => {\n    const data = e.target.value;\n\n    this.setState({ data });\n  };\n}\n\nconst regex_if = /<!\\[if.*?endif]>/gms;\nconst regex_level = /level(\\d)/;\n\nfunction cleanUpNastyMsgHtml(input: string) {\n  return input.replaceAll(regex_if, \"\");\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { App } from \"./App\";\nimport \"./index.css\";\n\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}